{"version":3,"sources":["stores/form/types.ts","components/AppLayout/index.tsx","components/FlowController/index.tsx","stores/form/actions.ts","components/FormsPage/index.tsx","components/HomePage/index.tsx","components/App/index.tsx","serviceWorker.ts","stores/form/index.ts","stores/form/reducers.ts","index.tsx"],"names":["ADD_FORM","REMOVE_FORM","FLOW_NEXT_PAGE","FLOW_PREVIOUS_PAGE","AppLayout","_ref","children","react_default","a","createElement","Fragment","Navbar","bg","expand","className","Container","react_router_dom","to","Toggle","aria-controls","Collapse","id","Nav","FLOW_STEPS","connect","flowNextPage","type","components_AppLayout","Button","onClick","React","Component","FlowController","pageIndex","useSelector","state","flow","formCount","form","count","addForm","payload","props","Row","Col","xs","HomePage","App","basename","react_router","path","exact","component","FormsPage","Boolean","window","location","hostname","match","store","createStore","combineReducers","arguments","length","undefined","action","Object","objectSpread","subscribe","console","log","getState","ReactDOM","render","es","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3866952f.chunk.js","sourcesContent":["export const ADD_FORM = 'ADD_FORM';\nexport const REMOVE_FORM = 'REMOVE_FORM';\n\nexport interface FormState {\n  count: number\n};\n\ninterface AddFormAction {\n  type: typeof ADD_FORM\n  payload: number\n};\n\ninterface RemoveFormAction {\n  type: typeof REMOVE_FORM\n  payload: never\n};\n\nexport type FormActionTypes = AddFormAction | RemoveFormAction;\n\n\nexport const FLOW_NEXT_PAGE = 'FLOW_NEXT_PAGE';\nexport const FLOW_PREVIOUS_PAGE = 'FLOW_PREVIOUS_PAGE';\n\nexport interface FlowState {\n  pageIndex: number\n};\n\ninterface FlowNextPageAction {\n  type: typeof FLOW_NEXT_PAGE\n};\n\ninterface FlowPreviousPageAction {\n  type: typeof FLOW_PREVIOUS_PAGE\n};\n\nexport type FlowActionTypes = FlowNextPageAction | FlowPreviousPageAction;\nexport type CombinedState = {\n  form: FormState,\n  flow: FlowState,\n}\n","import { Container, Nav, Navbar } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\nimport React from 'react';\n\nconst AppLayout: React.FC = ({ children }) => {\n  return (\n    <React.Fragment>\n      <Navbar bg=\"light\" expand=\"lg\" className=\"mb-3\">\n        <Container>\n          <Link className=\"navbar-brand\" to=\"/\">Tombotax</Link>\n          <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n          <Navbar.Collapse id=\"basic-navbar-nav\">\n            <Nav className=\"mr-auto\">\n              <Link to=\"/forms\" className=\"nav-link\">Forms</Link>\n            </Nav>\n          </Navbar.Collapse>\n        </Container>\n      </Navbar>\n\n      <Container>\n        {children}\n      </Container>\n    </React.Fragment>\n  );\n};\n\nexport default AppLayout;\n","import { Button } from 'react-bootstrap';\nimport { connect, useSelector } from 'react-redux';\nimport React from 'react';\n\nimport { CombinedState } from '../../stores/form/types';\nimport { flowNextPage } from '../../stores/form/actions';\nimport AppLayout from '../AppLayout';\n\nconst FlowPageOne: React.FC<{ flowNextPage: typeof flowNextPage }> = ({ flowNextPage }) => {\n  return (\n    <AppLayout>\n      <p>Flow Step 1</p>\n      <Button onClick={() => flowNextPage()}>Next</Button>\n    </AppLayout>\n  );\n};\nconst ConnectedFlowPageOne = connect(() => ({}), { flowNextPage })(FlowPageOne);\n\nclass FlowPageTwo extends React.Component {\n  render() {\n    return (\n      <AppLayout>\n        <p>Flow Step 2</p>\n      </AppLayout>\n    );\n  }\n};\n\nconst FLOW_STEPS: React.ComponentType[] = [\n  ConnectedFlowPageOne,\n  FlowPageTwo,\n];\n\nconst FlowController: React.FC = () => {\n  const pageIndex = useSelector((state: CombinedState) => state.flow.pageIndex);\n\n  return React.createElement(FLOW_STEPS[pageIndex]);\n};\n\nexport default FlowController;\n","import {\n  ADD_FORM,\n  FLOW_NEXT_PAGE,\n  FLOW_PREVIOUS_PAGE,\n  FlowActionTypes,\n  FormActionTypes\n} from './types';\n\nexport function addForm(count: number): FormActionTypes {\n  return {\n    type: ADD_FORM,\n    payload: count,\n  };\n}\n\nexport function flowNextPage(): FlowActionTypes {\n  return {\n    type: FLOW_NEXT_PAGE,\n  };\n}\n\nexport function flowPreviousPage(): FlowActionTypes {\n  return {\n    type: FLOW_PREVIOUS_PAGE,\n  };\n}\n","import { Col, Row } from 'react-bootstrap';\nimport { connect } from 'react-redux';\nimport React from 'react';\n\nimport { CombinedState } from '../../stores/form/types';\nimport { addForm } from '../../stores/form/actions';\nimport AppLayout from '../AppLayout';\n\nconst FormsPage: React.FC<{ formCount: number, addForm: typeof addForm }> = (props) => {\n  return (\n    <AppLayout>\n      <Row>\n        <Col xs={4}>\n          Input Forms: {props.formCount}\n        </Col>\n\n        <Col xs={4}>\n          <button onClick={() => props.addForm(1)}>Add Form</button>\n        </Col>\n      </Row>\n    </AppLayout>\n  );\n};\n\nconst mapStateToProps = (state: CombinedState) => ({\n  formCount: state.form.count,\n});\n\nexport default connect(\n  mapStateToProps,\n  { addForm },\n)(FormsPage);\n","import { Col, Row } from 'react-bootstrap';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport AppLayout from '../AppLayout';\n\nconst HomePage: React.FC = () => {\n  return (\n    <AppLayout>\n      <Row>\n        <Col>\n          <p>Welcome to Tombotax!</p>\n          <p>You can do anything at Tombotax.</p>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <Link to=\"/flow\" className=\"btn btn-primary\">\n            Start\n          </Link>\n        </Col>\n      </Row>\n    </AppLayout>\n  );\n};\n\nexport default HomePage;\n","import { BrowserRouter, Route } from 'react-router-dom';\nimport React from 'react';\n\nimport FlowController from '../FlowController';\nimport FormsPage from '../FormsPage';\nimport HomePage from '../HomePage';\n\n// import Forms from '@tombotax/forms';\n\nconst App: React.FC<{ basename?: string }> = (props) => {\n  return (\n    <BrowserRouter basename={props.basename} >\n      <Route path=\"/\" exact component={HomePage} />\n      <Route path=\"/forms\" exact component={FormsPage} />\n      <Route path=\"/flow\" exact component={FlowController} />\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers, createStore } from 'redux';\n\nimport { formReducer, flowReducer } from './reducers';\n\nconst store = createStore(combineReducers({\n  form: formReducer,\n  flow: flowReducer,\n}));\n\nexport default store;\n","import {\n  ADD_FORM,\n  FLOW_NEXT_PAGE,\n  FLOW_PREVIOUS_PAGE,\n  FlowActionTypes,\n  FlowState,\n  FormActionTypes,\n  FormState,\n  REMOVE_FORM\n} from './types';\n\nexport function formReducer(\n  state = { count: 0 } as FormState,\n  action: FormActionTypes\n): FormState {\n  switch(action.type) {\n    case ADD_FORM:\n      return {\n        ...state,\n        count: state.count + action.payload,\n      };\n    case REMOVE_FORM:\n      return {\n        ...state,\n        count: state.count - action.payload,\n      };\n  }\n\n  return state;\n}\n\nexport function flowReducer(\n  state = { pageIndex: 0 } as FlowState,\n  action: FlowActionTypes\n): FlowState {\n  switch(action.type) {\n    case FLOW_NEXT_PAGE:\n      return {\n        ...state,\n        pageIndex: state.pageIndex + 1,\n      };\n    case FLOW_PREVIOUS_PAGE:\n      return {\n        ...state,\n        pageIndex: state.pageIndex - 1,\n      };\n  }\n\n  return state;\n}\n","import './index.css';\n\nimport { Provider } from 'react-redux';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './stores/form';\n\nstore.subscribe(() => console.log('updated state: ', store.getState()));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App\n      basename={process.env.NODE_ENV === 'production' ? '/tombotax/' : ''}\n    />\n  </Provider>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}